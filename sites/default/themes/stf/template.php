<?php

function _phptemplate_variables($hook, $vars) {

  $function = 'phptemplate_preprocess_'. str_replace('-', '_', $hook);
  if (function_exists($function)) {
    $function($vars);
  }

  return $vars;
}

function phptemplate_preprocess_page(&$vars) {
  // These aren't really module CSS files, but we need them to come
  // before the main style sheet.
  $theme_path = path_to_theme();
  drupal_add_css($theme_path .'/lib/reset.css', 'module');
  drupal_add_css($theme_path .'/lib/typography.css', 'module');
  drupal_add_css($theme_path .'/lib/grid.css', 'module');
  $vars['styles'] = drupal_get_css();

  drupal_add_js(drupal_get_path('theme', 'stf') .'/shadedborder.js', 'module');
  $vars['scripts'] = drupal_get_js();
}

function phptemplate_preprocess_node(&$vars) {

  // Once more, with feeling!
  $function = 'phptemplate_preprocess_node_'. str_replace('-', '_', $vars['node']->type);
  if (function_exists($function)) {
    $function($vars);
  }
}

function phptemplate_preprocess_node_note(&$vars) {
  if ($vars['field_character'][0]['nid']) {
    $vars['submitted'] = t('Posted @date by !character (!user)', array(
      '@date' => $vars['date'],
      '!character' => l($vars['field_character_name'][0]['value'], 'node/'. $vars['field_character'][0]['nid']),
      '!user' => $vars['name'],
    ));
  }
  else {
    $vars['submitted'] = t('Posted @date by !user', array(
      '@date' => $vars['date'],
      '!user' => $vars['name'],
    ));
  }
}

/**
 * views template to output a view.
 * This code was generated by the views theming wizard
 * Date: 27 February 2007 - 10:55pm
 * View: og_notes
 *
 * This function goes in your template.php file
 */
function phptemplate_views_view_list_og_notes($view, $nodes, $type, $parent=NULL) {
  $fields = _views_get_fields();

  $taken = array();
  
  // Normalize the top level of nodes to all point to 0 as their parent
  // We only have to do this on the top-level pass, because otherwise it's
  // irrelevant.
  if (!isset($parent)) {
    $parents = array();
    foreach ($nodes as $node) {
      $parents[] = $node->nid;
    }
    foreach ($nodes as $node) {
      if (! in_array($node->node_data_field_parent_note_field_parent_note_nid, $parents)) {
        $node->node_data_field_parent_note_field_parent_note_nid = 0;
      }
    }
    $parent = 0;
  }
  
  // Set up the fields in nicely named chunks.
  foreach ($view->field as $id => $field) {
    $field_name = $field['field'];
    if (isset($taken[$field_name])) {
      $field_name = $field['queryname'];
    }
    $taken[$field_name] = true;
    $field_names[$id] = $field_name;
  }

  // Set up some variables that won't change.
  $base_vars = array(
    'view' => $view,
    'view_type' => $type,
  );

  static $count = 1;
  static $stripe = 1;

  foreach ($nodes as $i => $node) {
    if ($node->node_data_field_parent_note_field_parent_note_nid != $parent) {
      continue;
    }
    $vars = $base_vars;
    $vars['node'] = $node;
    $vars['count'] = $count++;
    $vars['stripe'] = $stripe++ % 2 ? 'even' : 'odd';
    foreach ($view->field as $id => $field) {
      $name = $field_names[$id];
      $vars[$name] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
      if (isset($field['label'])) {
        $vars[$name . '_label'] = $field['label'];
      }
    }
    $item = _phptemplate_callback('views-list-og_notes', $vars);
    $item .= call_user_func(__FUNCTION__, $view, $nodes, $type, $node->nid);
    $items[] = $item;
  }
  if ($items) {
    return theme('item_list', $items);
  }
  else {
    return '';
  }
}


/**
 * Override to show users's real name instead of login name.
 */
function phptemplate_username($object) {

  profile_load_profile($object);
  
  $name = array();
  if (!empty($object->profile_first_name)) {
    $name[] = $object->profile_first_name;
  }  
  if (!empty($object->profile_last_name)) {
    $name[] = $object->profile_last_name;
  }
  
  $name = count($name) ? implode($name, ' ') : $object->name;
  
  if ($object->uid && $name) {
    // Shorten the name when it is too long or it will break many tables.
    if (drupal_strlen($name) > 30) {
      $name = drupal_substr($name, 0, 25) .'...';
    }

    if (user_access('access user profiles')) {
      $output = l($name, 'user/'. $object->uid, array('title' => t('View user profile.')));
    }
    else {
      $output = check_plain($name);
    }
  }
  else if ($name) {
    // Sometimes modules display content composed by people who are
    // not registered members of the site (e.g. mailing list or news
    // aggregator modules). This clause enables modules to display
    // the true author of the content.
    if ($object->homepage) {
      $output = l($name, $object->homepage);
    }
    else {
      $output = check_plain($name);
    }

    $output .= ' ('. t('not verified') .')';
  }
  else {
    $output = variable_get('anonymous', t('Anonymous'));
  }

  return $output;
}


function phptemplate_views_view_table_character_notes($view, $nodes, $type) {
  $fields = _views_get_fields();

  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      $cell['data'] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
      $cell['class'] = "view-field view-field-$field[queryname]";
      $row[] = $cell;
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows, array(), t('Recent posts'));
}

/**
 * Theme function for the parent nid field of notes in the og_note view.
 *
 * We don't actually ever show this field, so don't waste time or SQL theming it.
 */
function phptemplate_views_handle_field_og_notes_node_data_field_parent_note_field_parent_note_nid() { }

